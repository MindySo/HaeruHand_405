# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - ai_review
  - build
  - test
  - deploy

# 토큰 최적화 AI 리뷰
smart-ai-review:
  stage: ai_review
  image: python:3.9-slim
  before_script:
    - pip install --upgrade pip
    - pip install --no-cache-dir google-generativeai requests
    - echo "Checking environment variables..."
    - test -n "$GEMINI_API_KEY" && echo "✓ GEMINI_API_KEY is set" || (echo "ERROR: GEMINI_API_KEY is not set" && exit 1)
    - test -n "$GITLAB_TOKEN" && echo "✓ GITLAB_TOKEN is set" || (echo "ERROR: GITLAB_TOKEN is not set" && exit 1)
    - test -f "optimized_gemini_review.py" && echo "✓ Script file found" || (echo "ERROR: optimized_gemini_review.py not found" && ls -la && exit 1)
  script:
    - echo "Starting AI Code Review..."
    - echo "MR IID: $CI_MERGE_REQUEST_IID"
    - echo "Project ID: $CI_PROJECT_ID"
    - echo "Branch: $CI_COMMIT_REF_NAME"
    - python optimized_gemini_review.py
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    GEMINI_API_KEY: $GEMINI_API_KEY
    GITLAB_TOKEN: $GITLAB_TOKEN
  allow_failure: true
  timeout: 5 minutes

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."