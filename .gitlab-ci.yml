stages:
  - ai_review
  - build
  - test
  - deploy

# AI 코드리뷰 자동화 (be-develop, fe-develop 브랜치로의 MR만)
smart-ai-review:
  stage: ai_review
  image: python:3.9-slim
  before_script:
    - pip install google-generativeai requests
  script:
    - python optimized_gemini_review.py
  rules:
    # be-develop 브랜치로의 MR (백엔드)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "be-develop"
    # fe-develop 브랜치로의 MR (프론트엔드)  
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "fe-develop"
  variables:
    GEMINI_API_KEY: $GEMINI_API_KEY
    GITLAB_TOKEN: $GITLAB_TOKEN
  allow_failure: true
  timeout: 5m

# 빌드 단계
build-job:
  stage: build
  script:
    - echo "Building application..."
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  rules:  # ← 올바른 위치 (build-job 내부로 들여쓰기)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "be-develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "fe-develop"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# 테스트 단계
test-job:
  stage: test
  script:
    - echo "Running tests..."
    # 실제 테스트 명령어로 교체하세요
    # - npm test
    # - mvn test
    - echo "Tests completed."
  coverage: '/Coverage: \d+\.\d+%/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# 배포 단계 (수동 실행)
deploy-job:
  stage: deploy
  environment: 
    name: production
    url: https://your-app.ssafy.com  # 실제 배포 URL로 교체
  script:
    - echo "Deploying application..."
    # 실제 배포 명령어로 교체하세요
    - echo "Deployment complete."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual